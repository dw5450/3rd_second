오늘 : 복습 

소켓 모드

	블로킹 소켓과 넌블로킹 소켓으로 구분

블로킹 소켓

	소켓 함수 호출 시 조건이 만족되지 않으면 함수가 리턴하지 않고 스레드 실행이정지
	조건이 만족되면 소켓 함수가 리턴하면서 정지된 스레드가 깨어나 실해을 재개

	소켓 함수	 		리턴 조건

	accept()			접속한 클라이언트가 있을 경우

	connect()			서버에 접속이 성공했을 경우 
	
	send(), sendto()		데이터를 송신버퍼에 복사

	recv(), recvfrom()		소켓 수신 버퍼에 도착한 데이터가 1바이트 이상 있고 이를 응용 프로그램이 제공한 버페에 복사했을 때


넌블로킹 소켓

	소켓 함수 호출 시 조건이 만족되지 않더라도 함수가 리턴하므로 스레드가 중단 없이 다음 코드를 수행

	socket() 함수는 기본적으로 블로킹 소켓을 생성하므로 ioctlsocket() 함수를 호출해 넌블로킹 소켓으로 전환


	SOCKET sock = sock(AF_INET, SOCK_STREAM, 0);
	if(sockj == INVALID



~~

	넌블로킹 소켓과 소켓 함수

	너블로킹 소켓에 대해 소켓 함수를 호출할 때 조건이 만족 되지 않으면 소켓 함수는 오류를 리턴

	WSAGetLastError() 함수를 이용해 오류 코드를 확인

	대개 오류 코드는 WSAEWOULDBLOCK


넌블로킹 소켓의 특징

	장점 : 소켓 함수 호출 시 항상 리턴하므로 조건이 마족되지 않아 스레드가 오랜 시간 정지하는 상화으, 즉 교착 상태가 생기지 않는다.

	멀티스레드를 사용하지 않고도 여러 소켓에 대해 돌아가면서 입출력을 처리할 수 있다. 필요하다면 중간에 소켓과 직접 관계가
	없는 다른 작업을 할 수도 있다.

	단점 : 소켓 함수를 호출 할 때마다 WSAEWOULDBLOCK 과 같은 오류 코드를 확인하고 처리해야하 하므로 프로그램 구조가 복잡해진다.

	블로킹 소켓을 사용한 경우보다 CPU 사용률이 높다.		//cpu를 놀리지 않는다. 장점이 될 수 도 있다.

	


서버 작성 모델

	반복 서버 - 직렬, 한 계산원이 한개의 카운터를  UDP 서버

	여러ㅂ 클라이언트를 한 번에 하나씩 처리

		장점 스레드 한 개만으로 구현하므로 시스템 자원 소모가 적음

	단점 : 한 클라이언트의 처리 시간이 길어지면 다른 크라이언트의 대기 시간이 길어짐

	병행 서버 - 병렬, 한 계산원이 여러개의 카운터를 TCP 서버

		여러 클라이ㅓㅇㄴ트를 동시에 처리

		장점 :한 클라이언트의 처리 시간이 길어지더라도 다른 클라이언트에 영향을 주지 않음
		
		단점 : 스레드를 여러 개 생성하여 구현하므로 시스템 자원 소모가 많음.



이상적인 서버의 기능

		가능한 많은 클라이언트가 접속 가능

		서버는 각 클라이언트의 서비스 용청에 빠르게 반응하며 고속으로 데이터를 전송

		시스셑ㅁ 자원 사용량을 최소화 -> 적을 수록 많이 접속 가능 


이상적인 소켓 입출력 모델의 특징

		소켓 함수 호출 시 블로킹을 최소화 >> cpu가 쉬지 않고 일을 하도록

		스레드 개수를 를 일정 수준으로 유지 >> 서버가 optimize 되어 있도록

		CPU 명령 수행과 입출력 작업을 병행 >> io가 cpu는 따로 놀 수 있다.? io만 따로?

		유저 모드와 커널 모드 전환 횟수를 최소화 	


Select 모델

	select() 함수가 핵심적인 역활을 함

	스켓 모드 (블로킹, 넌블로킹)와 관계없이 여러 소켓을 한 스레드로 처리 가능


핵심 원리

	소켓 함수 호출이 성공할 수 있는 시점을 미리 알 수 있어서 소켓 함수 호출시 조건이 만ㄷ족되닞 않아 생기는 문데를 해결할 수 있음

	unix에서도 돌릴 수 잇음
		
	블로킹 : 블로킹 방지				cpu 가 놀지 않도록
			
	넌블로킹 소켓 : 다시 호출해야하는 상황을 방지 		2번 작업하지 않도록.

	운영 체제가 가능하다고 하면 그때 함수를 실행 함. 		
	
	매번 왔어요? 물어보는거 보다 오면 알려달라고 하는게 이득			 



동작 원리


	읽기 셋 			쓰기 셋 			예외 셋			-> select(....)


(select...)->리턴(조건이 만족 된 애들만 리턴)	읽기 셋 		쓰기 셋 		예외셋

소켓 셋을 비움

소켓 셋에 소켓을 넣음 넣을 수 있는 소켓의최대 갯수는 64

select() 함수 호출 xkdladkdntdl null이면 select() 함
수는 조건을 만족하는 소켓이 있을 때 까지 리턴하지 않음

select() 함수가 리턴하면 소켓 셋에 남아 있는 모든 처리

하나라도 나오면 리턴함.


		
Select 모델에 

WSAAsyncSelect

WSAEventSelect

io/cp 마지막 입출력 모델  complation port
 